import { Request, Response, NextFunction } from "express";
import { validate, validateRequest } from "../src/api/v1/middleware/validate";
import { employeeSchema, employeeIdSchema, departmentSchema } from "../src/api/v1/validations/employeeValidation";

type Employee = {
    id?: string;
    name: string;
    position: string;
    department: string;
    email: string;
    phone: string;
    branchID: string;
};

type EmployeeId = {
    id: string;
};

type Department = {
    department: string;
};

//Most of these tests got generated by AI using branchValidation.test.ts as a template

describe("Validate schema for Employees", () => {
    it("should not throw an error for valid employee data", () => {
        const data: Employee = {
            name: "John Doe",
            position: "Software Engineer",
            department: "IT",
            email: "john.doe@example.com",
            phone: "+1234567890",
            branchID: "123"
        };

        expect(() => validate(employeeSchema, data)).not.toThrow();
    });

    it("should not throw an error for valid employee data with optional fields", () => {
        const data: Employee = {
            id: "456",
            name: "John Doe",
            position: "Software Engineer",
            department: "IT",
            email: "john.doe@example.com",
            phone: "+1234567890",
            branchID: "123"
        };

        expect(() => validate(employeeSchema, data)).not.toThrow();
    });

    it("should throw an error for missing name", () => {
        const data: Partial<Employee> = {
            position: "Software Engineer",
            department: "IT",
            email: "john.doe@example.com",
            phone: "+1234567890",
            branchID: "123"
        };

        expect(() => validate(employeeSchema, data)).toThrow("Validation error: Name is required");
    });

    it("should throw an error for empty name", () => {
        const data: Employee = {
            name: "",
            position: "Software Engineer",
            department: "IT",
            email: "john.doe@example.com",
            phone: "+1234567890",
            branchID: "123"
        };

        expect(() => validate(employeeSchema, data)).toThrow("Validation error: Name cannot be empty.");
    });

    it("should throw an error for missing position", () => {
        const data: Partial<Employee> = {
            name: "John Doe",
            department: "IT",
            email: "john.doe@example.com",
            phone: "+1234567890",
            branchID: "123"
        };

        expect(() => validate(employeeSchema, data)).toThrow("Validation error: Position is required");
    });

    it("should throw an error for empty position", () => {
        const data: Employee = {
            name: "John Doe",
            position: "",
            department: "IT",
            email: "john.doe@example.com",
            phone: "+1234567890",
            branchID: "123"
        };

        expect(() => validate(employeeSchema, data)).toThrow("Validation error: Position cannot be empty.");
    });

    it("should throw an error for missing department", () => {
        const data: Partial<Employee> = {
            name: "John Doe",
            position: "Software Engineer",
            email: "john.doe@example.com",
            phone: "+1234567890",
            branchID: "123"
        };

        expect(() => validate(employeeSchema, data)).toThrow("Validation error: Department is required");
    });

    it("should throw an error for empty department", () => {
        const data: Employee = {
            name: "John Doe",
            position: "Software Engineer",
            department: "",
            email: "john.doe@example.com",
            phone: "+1234567890",
            branchID: "123"
        };

        expect(() => validate(employeeSchema, data)).toThrow("Validation error: Department cannot be empty.");
    });

    it("should throw an error for missing email", () => {
        const data: Partial<Employee> = {
            name: "John Doe",
            position: "Software Engineer",
            department: "IT",
            phone: "+1234567890",
            branchID: "123"
        };

        expect(() => validate(employeeSchema, data)).toThrow("Validation error: Email is required");
    });

    it("should throw an error for empty email", () => {
        const data: Employee = {
            name: "John Doe",
            position: "Software Engineer",
            department: "IT",
            email: "",
            phone: "+1234567890",
            branchID: "123"
        };

        expect(() => validate(employeeSchema, data)).toThrow("Validation error: Email cannot be empty.");
    });

    it("should throw an error for invalid email format", () => {
        const data: Employee = {
            name: "John Doe",
            position: "Software Engineer",
            department: "IT",
            email: "invalid-email",
            phone: "+1234567890",
            branchID: "123"
        };

        expect(() => validate(employeeSchema, data)).toThrow("Validation error: Email must be a valid email address");
    });

    it("should throw an error for missing phone number", () => {
        const data: Partial<Employee> = {
            name: "John Doe",
            position: "Software Engineer",
            department: "IT",
            email: "john.doe@example.com",
            branchID: "123"
        };

        expect(() => validate(employeeSchema, data)).toThrow("Validation error: Phone number is required");
    });

    it("should throw an error for empty phone number", () => {
        const data: Employee = {
            name: "John Doe",
            position: "Software Engineer",
            department: "IT",
            email: "john.doe@example.com",
            phone: "",
            branchID: "123"
        };

        expect(() => validate(employeeSchema, data)).toThrow("Validation error: Phone cannot be empty.");
    });

    it("should throw an error for phone number with invalid format", () => {
        const data: Employee = {
            name: "John Doe",
            position: "Software Engineer",
            department: "IT",
            email: "john.doe@example.com",
            phone: "invalid-phone",
            branchID: "123"
        };

        expect(() => validate(employeeSchema, data)).toThrow("Validation error: Phone number format is invalid; only digits, spaces, dashes or parentheses allowed");
    });

    it("should throw an error for missing branch ID", () => {
        const data: Partial<Employee> = {
            name: "John Doe",
            position: "Software Engineer",
            department: "IT",
            email: "john.doe@example.com",
            phone: "+1234567890"
        };

        expect(() => validate(employeeSchema, data)).toThrow("Validation error: Branch Id is required");
    });

    it("should throw an error for empty branch ID", () => {
        const data: Employee = {
            name: "John Doe",
            position: "Software Engineer",
            department: "IT",
            email: "john.doe@example.com",
            phone: "+1234567890",
            branchID: ""
        };

        expect(() => validate(employeeSchema, data)).toThrow("Validation error: Branch Id cannot be empty.");
    });

    it("should throw an error for non-numeric branch ID", () => {
        const data: Employee = {
            name: "John Doe",
            position: "Software Engineer",
            department: "IT",
            email: "john.doe@example.com",
            phone: "+1234567890",
            branchID: "ABC123"
        };

        expect(() => validate(employeeSchema, data)).toThrow("Validation error: Branch Id must be a number");
    });
});

describe("Validate schema for EmployeeID", () => {
    it("should not throw an error for valid Employee ID", () => {
        const data: EmployeeId = {
            id: "1"
        };

        expect(() => validate(employeeIdSchema, data)).not.toThrow();
    });

    it("should throw an error for missing Employee ID", () => {
        const data: Partial<EmployeeId> = {};

        expect(() => validate(employeeIdSchema, data)).toThrow(
            "Validation error: Id is required"
        );
    });

    it("should throw an error for empty Employee ID", () => {
        const data: Partial<EmployeeId> = {
            id: ""
        };

        expect(() => validate(employeeIdSchema, data)).toThrow(
            "Validation error: Id cannot be empty."
        );
    });

    it("should throw an error for non-numerical Employee ID", () => {
        const data: Partial<EmployeeId> = {
            id: "a"
        };

        expect(() => validate(employeeIdSchema, data)).toThrow(
            "Validation error: Id must be a number"
        );
    });
});

describe("Validate schema for Department", () => {
    it("should not throw an error for valid Department", () => {
        const data: Department = {
            department: "Engineering"
        };

        expect(() => validate(departmentSchema, data)).not.toThrow();
    });

    it("should throw an error for missing Department", () => {
        const data: Partial<Department> = {};

        expect(() => validate(departmentSchema, data)).toThrow(
            "Validation error: Department is required"
        );
    });

    it("should throw an error for empty Department", () => {
        const data: Partial<Department> = {
            department: ""
        };

        expect(() => validate(departmentSchema, data)).toThrow(
            "Validation error: Department cannot be empty."
        );
    });
});

describe("validateRequest middleware for employees body", () => {
    let req: Partial<Request>;
    let res: Partial<Response>;
    let next: NextFunction;

    beforeEach(() => {
        req = { body: {}, params: {} };
        res = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn(),
        };
        next = jest.fn();
    });

    it("should call next for valid employee data", () => {
        req.body = {
            name: "John Doe",
            position: "Software Engineer",
            department: "IT",
            email: "john.doe@example.com",
            phone: "+1234567890",
            branchID: "123"
        };

        validateRequest(employeeSchema, "body")(req as Request, res as Response, next);

        expect(next).toHaveBeenCalled();
        expect(res.status).not.toHaveBeenCalled();
        expect(res.json).not.toHaveBeenCalled();
    });

    it("should return an error for missing name", () => {
        req.body = {
            position: "Software Engineer",
            department: "IT",
            email: "john.doe@example.com",
            phone: "+1234567890",
            branchID: "123"
        };

        validateRequest(employeeSchema, "body")(req as Request, res as Response, next);

        expect(next).not.toHaveBeenCalled();
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.json).toHaveBeenCalledWith({
            error: "Validation error: Name is required"
        });
    });

    it("should return an error for empty name", () => {
        req.body = {
            name: "",
            position: "Software Engineer",
            department: "IT",
            email: "john.doe@example.com",
            phone: "+1234567890",
            branchID: "123"
        };

        validateRequest(employeeSchema, "body")(req as Request, res as Response, next);

        expect(next).not.toHaveBeenCalled();
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.json).toHaveBeenCalledWith({
            error: "Validation error: Name cannot be empty."
        });
    });

    it("should return an error for missing position", () => {
        req.body = {
            name: "John Doe",
            department: "IT",
            email: "john.doe@example.com",
            phone: "+1234567890",
            branchID: "123"
        };

        validateRequest(employeeSchema, "body")(req as Request, res as Response, next);

        expect(next).not.toHaveBeenCalled();
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.json).toHaveBeenCalledWith({
            error: "Validation error: Position is required"
        });
    });

    it("should return an error for empty position", () => {
        req.body = {
            name: "John Doe",
            position: "",
            department: "IT",
            email: "john.doe@example.com",
            phone: "+1234567890",
            branchID: "123"
        };

        validateRequest(employeeSchema, "body")(req as Request, res as Response, next);

        expect(next).not.toHaveBeenCalled();
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.json).toHaveBeenCalledWith({
            error: "Validation error: Position cannot be empty."
        });
    });

    it("should return an error for missing department", () => {
        req.body = {
            name: "John Doe",
            position: "Software Engineer",
            email: "john.doe@example.com",
            phone: "+1234567890",
            branchID: "123"
        };

        validateRequest(employeeSchema, "body")(req as Request, res as Response, next);

        expect(next).not.toHaveBeenCalled();
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.json).toHaveBeenCalledWith({
            error: "Validation error: Department is required"
        });
    });

    it("should return an error for empty department", () => {
        req.body = {
            name: "John Doe",
            position: "Software Engineer",
            department: "",
            email: "john.doe@example.com",
            phone: "+1234567890",
            branchID: "123"
        };

        validateRequest(employeeSchema, "body")(req as Request, res as Response, next);

        expect(next).not.toHaveBeenCalled();
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.json).toHaveBeenCalledWith({
            error: "Validation error: Department cannot be empty."
        });
    });

    it("should return an error for missing email", () => {
        req.body = {
            name: "John Doe",
            position: "Software Engineer",
            department: "IT",
            phone: "+1234567890",
            branchID: "123"
        };

        validateRequest(employeeSchema, "body")(req as Request, res as Response, next);

        expect(next).not.toHaveBeenCalled();
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.json).toHaveBeenCalledWith({
            error: "Validation error: Email is required"
        });
    });

    it("should return an error for empty email", () => {
        req.body = {
            name: "John Doe",
            position: "Software Engineer",
            department: "IT",
            email: "",
            phone: "+1234567890",
            branchID: "123"
        };

        validateRequest(employeeSchema, "body")(req as Request, res as Response, next);

        expect(next).not.toHaveBeenCalled();
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.json).toHaveBeenCalledWith({
            error: "Validation error: Email cannot be empty."
        });
    });

    it("should return an error for invalid email format", () => {
        req.body = {
            name: "John Doe",
            position: "Software Engineer",
            department: "IT",
            email: "invalid-email",
            phone: "+1234567890",
            branchID: "123"
        };

        validateRequest(employeeSchema, "body")(req as Request, res as Response, next);

        expect(next).not.toHaveBeenCalled();
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.json).toHaveBeenCalledWith({
            error: "Validation error: Email must be a valid email address"
        });
    });

    it("should return an error for missing phone number", () => {
        req.body = {
            name: "John Doe",
            position: "Software Engineer",
            department: "IT",
            email: "john.doe@example.com",
            branchID: "123"
        };

        validateRequest(employeeSchema, "body")(req as Request, res as Response, next);

        expect(next).not.toHaveBeenCalled();
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.json).toHaveBeenCalledWith({
            error: "Validation error: Phone number is required"
        });
    });

    it("should return an error for empty phone number", () => {
        req.body = {
            name: "John Doe",
            position: "Software Engineer",
            department: "IT",
            email: "john.doe@example.com",
            phone: "",
            branchID: "123"
        };

        validateRequest(employeeSchema, "body")(req as Request, res as Response, next);

        expect(next).not.toHaveBeenCalled();
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.json).toHaveBeenCalledWith({
            error: "Validation error: Phone cannot be empty."
        });
    });

    it("should return an error for phone number with invalid format", () => {
        req.body = {
            name: "John Doe",
            position: "Software Engineer",
            department: "IT",
            email: "john.doe@example.com",
            phone: "invalid-phone",
            branchID: "123"
        };

        validateRequest(employeeSchema, "body")(req as Request, res as Response, next);

        expect(next).not.toHaveBeenCalled();
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.json).toHaveBeenCalledWith({
            error: "Validation error: Phone number format is invalid; only digits, spaces, dashes or parentheses allowed"
        });
    });

    it("should return an error for missing branch ID", () => {
        req.body = {
            name: "John Doe",
            position: "Software Engineer",
            department: "IT",
            email: "john.doe@example.com",
            phone: "+1234567890"
        };

        validateRequest(employeeSchema, "body")(req as Request, res as Response, next);

        expect(next).not.toHaveBeenCalled();
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.json).toHaveBeenCalledWith({
            error: "Validation error: Branch Id is required"
        });
    });

    it("should return an error for empty branch ID", () => {
        req.body = {
            name: "John Doe",
            position: "Software Engineer",
            department: "IT",
            email: "john.doe@example.com",
            phone: "+1234567890",
            branchID: ""
        };

        validateRequest(employeeSchema, "body")(req as Request, res as Response, next);

        expect(next).not.toHaveBeenCalled();
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.json).toHaveBeenCalledWith({
            error: "Validation error: Branch Id cannot be empty."
        });
    });

    it("should return an error for non-numeric branch ID", () => {
        req.body = {
            name: "John Doe",
            position: "Software Engineer",
            department: "IT",
            email: "john.doe@example.com",
            phone: "+1234567890",
            branchID: "ABC123"
        };

        validateRequest(employeeSchema, "body")(req as Request, res as Response, next);

        expect(next).not.toHaveBeenCalled();
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.json).toHaveBeenCalledWith({
            error: "Validation error: Branch Id must be a number"
        });
    });
});

describe("validateRequest middleware for Employee Id parameter", () => {
    let req: Partial<Request>;
    let res: Partial<Response>;
    let next: NextFunction;

    beforeEach(() => {
        req = { body: {}, params: {} };
        res = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn(),
        };
        next = jest.fn();
    });

    it("should call next for valid Employee Id parameter", () => {
        req.params = {
            id: "1"
        };

        validateRequest(employeeIdSchema, "params")(req as Request, res as Response, next);

        expect(next).toHaveBeenCalled();
        expect(res.status).not.toHaveBeenCalled();
        expect(res.json).not.toHaveBeenCalled();
    });

    it("should return an error for missing Employee Id", () => {
        req.params = {};

        validateRequest(employeeIdSchema, "params")(req as Request, res as Response, next);

        expect(next).not.toHaveBeenCalled();
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.json).toHaveBeenCalledWith({
            error: "Validation error: Id is required"
        });
    });

    it("should return an error for empty Employee Id", () => {
        req.params = {
            id: ""
        };

        validateRequest(employeeIdSchema, "params")(req as Request, res as Response, next);

        expect(next).not.toHaveBeenCalled();
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.json).toHaveBeenCalledWith({
            error: "Validation error: Id cannot be empty."
        });
    });

    it("should return an error for non-numeric Employee Id", () => {
        req.params = {
            id: "abc"
        };

        validateRequest(employeeIdSchema, "params")(req as Request, res as Response, next);

        expect(next).not.toHaveBeenCalled();
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.json).toHaveBeenCalledWith({
            error: "Validation error: Id must be a number"
        });
    });
});

describe("validateRequest middleware for Department parameter", () => {
    let req: Partial<Request>;
    let res: Partial<Response>;
    let next: NextFunction;

    beforeEach(() => {
        req = { body: {}, params: {} };
        res = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn(),
        };
        next = jest.fn();
    });

    it("should call next for valid Department parameter", () => {
        req.body = {
            department: "Engineering"
        };

        validateRequest(departmentSchema, "body")(req as Request, res as Response, next);

        expect(next).toHaveBeenCalled();
        expect(res.status).not.toHaveBeenCalled();
        expect(res.json).not.toHaveBeenCalled();
    });

    it("should return an error for missing Department", () => {
        req.body = {};

        validateRequest(departmentSchema, "body")(req as Request, res as Response, next);

        expect(next).not.toHaveBeenCalled();
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.json).toHaveBeenCalledWith({
            error: "Validation error: Department is required"
        });
    });

    it("should return an error for empty Department", () => {
        req.body = {
            department: ""
        };

        validateRequest(departmentSchema, "body")(req as Request, res as Response, next);

        expect(next).not.toHaveBeenCalled();
        expect(res.status).toHaveBeenCalledWith(400);
        expect(res.json).toHaveBeenCalledWith({
            error: "Validation error: Department cannot be empty."
        });
    });
});